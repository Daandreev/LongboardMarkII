
Attiny85TemperatureRegulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000104  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a4  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004e2  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000267  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031f  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000011c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000120b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	09 d0       	rcall	.+18     	; 0x3e <main>
  2c:	26 c0       	rjmp	.+76     	; 0x7a <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <setup>:

#define light 3


void setup() {
		DDRB |= (1 << light);
  30:	bb 9a       	sbi	0x17, 3	; 23
  32:	08 95       	ret

00000034 <initADC>:
}

void initADC() {
  ADMUX =
  34:	82 e2       	ldi	r24, 0x22	; 34
  36:	87 b9       	out	0x07, r24	; 7
            (0 << MUX3)  |     // use ADC2 for input (PB4), MUX bit 3
            (0 << MUX2)  |     // use ADC2 for input (PB4), MUX bit 2
            (1 << MUX1)  |     // use ADC2 for input (PB4), MUX bit 1
            (0 << MUX0);       // use ADC2 for input (PB4), MUX bit 0

  ADCSRA = 
  38:	86 e8       	ldi	r24, 0x86	; 134
  3a:	86 b9       	out	0x06, r24	; 6
  3c:	08 95       	ret

0000003e <main>:
}


int main(void) 
{
  setup();
  3e:	f8 df       	rcall	.-16     	; 0x30 <setup>
  initADC();
  40:	f9 df       	rcall	.-14     	; 0x34 <initADC>
	  /*Scaler
	  0V~=-10*C
	  1.2V~=20*C
	  5V~=125*C
	  */
    ADCSRA |= (1 << ADSC);         // start ADC measurement
  42:	36 9a       	sbi	0x06, 6	; 6
    while (ADCSRA & (1 << ADSC) ); // wait till conversion complete 
  44:	36 99       	sbic	0x06, 6	; 6
  46:	fe cf       	rjmp	.-4      	; 0x44 <__SREG__+0x5>

    if (ADCH > 85)
  48:	85 b1       	in	r24, 0x05	; 5
  4a:	86 35       	cpi	r24, 0x56	; 86
  4c:	58 f0       	brcs	.+22     	; 0x64 <__SREG__+0x25>
    {
      PORTB |= (1<<light); //Turn off Light
  4e:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	2f e3       	ldi	r18, 0x3F	; 63
  52:	82 e4       	ldi	r24, 0x42	; 66
  54:	9f e0       	ldi	r25, 0x0F	; 15
  56:	21 50       	subi	r18, 0x01	; 1
  58:	80 40       	sbci	r24, 0x00	; 0
  5a:	90 40       	sbci	r25, 0x00	; 0
  5c:	e1 f7       	brne	.-8      	; 0x56 <__SREG__+0x17>
  5e:	00 c0       	rjmp	.+0      	; 0x60 <__SREG__+0x21>
  60:	00 00       	nop
  62:	ef cf       	rjmp	.-34     	; 0x42 <__SREG__+0x3>
      _delay_ms(5000);
    } else {
      PORTB &= ~(1<<light); //Turn on Light
  64:	c3 98       	cbi	0x18, 3	; 24
  66:	2f e3       	ldi	r18, 0x3F	; 63
  68:	82 e4       	ldi	r24, 0x42	; 66
  6a:	9f e0       	ldi	r25, 0x0F	; 15
  6c:	21 50       	subi	r18, 0x01	; 1
  6e:	80 40       	sbci	r24, 0x00	; 0
  70:	90 40       	sbci	r25, 0x00	; 0
  72:	e1 f7       	brne	.-8      	; 0x6c <__SREG__+0x2d>
  74:	00 c0       	rjmp	.+0      	; 0x76 <__SREG__+0x37>
  76:	00 00       	nop
  78:	e4 cf       	rjmp	.-56     	; 0x42 <__SREG__+0x3>

0000007a <_exit>:
  7a:	f8 94       	cli

0000007c <__stop_program>:
  7c:	ff cf       	rjmp	.-2      	; 0x7c <__stop_program>
