   1               		.file	"master.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	flash
  12               	flash:
  13               	.LFB6:
  14               		.file 1 "master.c"
   1:master.c      **** #include <avr/io.h>
   2:master.c      **** 
   3:master.c      **** #define F_CPU 1000000
   4:master.c      **** #include <util/delay.h>
   5:master.c      **** 
   6:master.c      **** #include "../i2c.h"
   7:master.c      **** 
   8:master.c      **** #define green 3
   9:master.c      **** #define red 4
  10:master.c      **** 
  11:master.c      **** void flash()
  12:master.c      **** {
  15               		.loc 1 12 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  13:master.c      **** 	PORTB |= 0b1000;
  21               		.loc 1 13 0
  22 0000 C39A      		sbi 0x18,3
  23               	.LVL0:
  24               	.LBB14:
  25               	.LBB15:
  26               		.file 2 "/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h"
   1:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   6:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
   9:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  12:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      distribution.
  16:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  17:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  21:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  33:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  35:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  38:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  41:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  42:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #include <math.h>
  45:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  46:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \file */
  47:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \code
  49:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \endcode
  53:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  54:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     used.
  58:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  59:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  68:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  77:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  81:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** */
  82:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  83:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  87:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  88:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  93:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  94:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
  97:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
  98:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #endif
 103:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 104:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** /**
 105:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 107:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 109:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 112:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 114:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 120:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 125:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 129:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 132:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 140:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****  */
 141:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** void
 142:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** {
 144:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 152:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 155:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 158:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#else
 159:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		//round up by default
 160:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	#endif
 162:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 
 163:/usr/local/CrossPack-AVR-20131216/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  27               		.loc 2 163 0
  28 0002 87EA      		ldi r24,lo8(24999)
  29 0004 91E6      		ldi r25,hi8(24999)
  30 0006 0197      		1: sbiw r24,1
  31 0008 01F4      		brne 1b
  32 000a 00C0      		rjmp .
  33 000c 0000      		nop
  34               	.LBE15:
  35               	.LBE14:
  14:master.c      **** 	_delay_ms(100);
  15:master.c      **** 	PORTB ^= 0b1000;
  36               		.loc 1 15 0
  37 000e 88B3      		in r24,0x18
  38 0010 98E0      		ldi r25,lo8(8)
  39 0012 8927      		eor r24,r25
  40 0014 88BB      		out 0x18,r24
  41               	.LVL1:
  42               	.LBB16:
  43               	.LBB17:
  44               		.loc 2 163 0
  45 0016 87EA      		ldi r24,lo8(24999)
  46 0018 91E6      		ldi r25,hi8(24999)
  47 001a 0197      		1: sbiw r24,1
  48 001c 01F4      		brne 1b
  49 001e 00C0      		rjmp .
  50 0020 0000      		nop
  51 0022 0895      		ret
  52               	.LBE17:
  53               	.LBE16:
  54               		.cfi_endproc
  55               	.LFE6:
  57               	.global	displayByte
  59               	displayByte:
  60               	.LFB7:
  16:master.c      **** 	_delay_ms(100);
  17:master.c      **** }
  18:master.c      **** 
  19:master.c      **** void displayByte(char byte)
  20:master.c      **** {
  61               		.loc 1 20 0
  62               		.cfi_startproc
  63               	.LVL2:
  64               	/* prologue: function */
  65               	/* frame size = 0 */
  66               	/* stack size = 0 */
  67               	.L__stack_usage = 0
  21:master.c      **** 	//DDRB |= 0b11000;i2c
  22:master.c      **** 	unsigned int bit = 0;
  68               		.loc 1 22 0
  69 0024 20E0      		ldi r18,0
  70 0026 30E0      		ldi r19,0
  23:master.c      **** 	while(bit < 8)
  24:master.c      **** 	{
  25:master.c      **** 		_delay_ms(50);
  26:master.c      **** 
  27:master.c      **** 		//If bit is 1
  28:master.c      **** 		if(1 & (byte >> bit))
  71               		.loc 1 28 0
  72 0028 90E0      		ldi r25,0
  73               	.LVL3:
  74               	.L6:
  75               	.LBB18:
  76               	.LBB19:
  77               		.loc 2 163 0
  78 002a E3ED      		ldi r30,lo8(12499)
  79 002c F0E3      		ldi r31,hi8(12499)
  80 002e 3197      		1: sbiw r30,1
  81 0030 01F4      		brne 1b
  82 0032 00C0      		rjmp .
  83 0034 0000      		nop
  84               	.LBE19:
  85               	.LBE18:
  86               		.loc 1 28 0
  87 0036 AC01      		movw r20,r24
  88 0038 022E      		mov r0,r18
  89 003a 00C0      		rjmp 2f
  90               		1:
  91 003c 5595      		asr r21
  92 003e 4795      		ror r20
  93               		2:
  94 0040 0A94      		dec r0
  95 0042 02F4      		brpl 1b
  96 0044 40FF      		sbrs r20,0
  97 0046 00C0      		rjmp .L3
  29:master.c      **** 		{
  30:master.c      **** 			PORTB |= 0b1000;
  98               		.loc 1 30 0
  99 0048 C39A      		sbi 0x18,3
 100               	.LVL4:
 101               	.LBB20:
 102               	.LBB21:
 103               		.loc 2 163 0
 104 004a FFE5      		ldi r31,lo8(59999)
 105 004c 4AEE      		ldi r20,hi8(59999)
 106 004e 50E0      		ldi r21,hlo8(59999)
 107 0050 F150      		1: subi r31,1
 108 0052 4040      		sbci r20,0
 109 0054 5040      		sbci r21,0
 110 0056 01F4      		brne 1b
 111 0058 00C0      		rjmp .
 112 005a 0000      		nop
 113               	.LBE21:
 114               	.LBE20:
  31:master.c      **** 			_delay_ms(300);
  32:master.c      **** 			PORTB &= ~(0b1000);
 115               		.loc 1 32 0
 116 005c C398      		cbi 0x18,3
 117 005e 00C0      		rjmp .L4
 118               	.LVL5:
 119               	.L3:
  33:master.c      **** 		}
  34:master.c      **** 		else //If bit is 0
  35:master.c      **** 		{
  36:master.c      **** 			PORTB |= 0b10000;
 120               		.loc 1 36 0
 121 0060 C49A      		sbi 0x18,4
 122               	.LVL6:
 123               	.LBB22:
 124               	.LBB23:
 125               		.loc 2 163 0
 126 0062 6FE5      		ldi r22,lo8(59999)
 127 0064 EAEE      		ldi r30,hi8(59999)
 128 0066 F0E0      		ldi r31,hlo8(59999)
 129 0068 6150      		1: subi r22,1
 130 006a E040      		sbci r30,0
 131 006c F040      		sbci r31,0
 132 006e 01F4      		brne 1b
 133 0070 00C0      		rjmp .
 134 0072 0000      		nop
 135               	.LBE23:
 136               	.LBE22:
  37:master.c      **** 			_delay_ms(300);
  38:master.c      **** 			PORTB &= ~(0b10000);
 137               		.loc 1 38 0
 138 0074 C498      		cbi 0x18,4
 139               	.LVL7:
 140               	.L4:
  39:master.c      **** 		}
  40:master.c      **** 
  41:master.c      **** 		bit++;
 141               		.loc 1 41 0
 142 0076 2F5F      		subi r18,-1
 143 0078 3F4F      		sbci r19,-1
 144               	.LVL8:
  23:master.c      **** 	while(bit < 8)
 145               		.loc 1 23 0
 146 007a 2830      		cpi r18,8
 147 007c 3105      		cpc r19,__zero_reg__
 148 007e 01F4      		brne .L6
 149               	/* epilogue start */
  42:master.c      **** 	}
  43:master.c      **** }
 150               		.loc 1 43 0
 151 0080 0895      		ret
 152               		.cfi_endproc
 153               	.LFE7:
 155               		.section	.text.startup,"ax",@progbits
 156               	.global	main
 158               	main:
 159               	.LFB8:
  44:master.c      **** 
  45:master.c      **** int main()
  46:master.c      **** {
 160               		.loc 1 46 0
 161               		.cfi_startproc
 162 0000 CF93      		push r28
 163               	.LCFI0:
 164               		.cfi_def_cfa_offset 3
 165               		.cfi_offset 28, -2
 166 0002 DF93      		push r29
 167               	.LCFI1:
 168               		.cfi_def_cfa_offset 4
 169               		.cfi_offset 29, -3
 170 0004 00D0      		rcall .
 171 0006 00D0      		rcall .
 172               	.LCFI2:
 173               		.cfi_def_cfa_offset 8
 174 0008 CDB7      		in r28,__SP_L__
 175 000a DEB7      		in r29,__SP_H__
 176               	.LCFI3:
 177               		.cfi_def_cfa_register 28
 178               	/* prologue: function */
 179               	/* frame size = 4 */
 180               	/* stack size = 6 */
 181               	.L__stack_usage = 6
  47:master.c      **** 	//Enable LEDs for display - not part of i2c protocol
  48:master.c      **** 	DDRB |= (1<<green) | (1<<red);
 182               		.loc 1 48 0
 183 000c 87B3      		in r24,0x17
 184 000e 8861      		ori r24,lo8(24)
 185 0010 87BB      		out 0x17,r24
  49:master.c      **** 
  50:master.c      **** 	//Initialize master
  51:master.c      **** 	i2cMInitialize();
 186               		.loc 1 51 0
 187 0012 00D0      		rcall i2cMInitialize
 188               	.LVL9:
  52:master.c      **** 
  53:master.c      **** 
  54:master.c      **** 	//Who we are talking to
  55:master.c      **** 	unsigned char slaveAddress = 0b1110000;
  56:master.c      **** 
  57:master.c      **** 	//Message to transmit starts with address to transmit to and write bit
  58:master.c      **** 	//Second byte is the byte being transmitted
  59:master.c      **** 	unsigned char messageWrite[2];
  60:master.c      **** 	messageWrite[0] = slaveAddress<<1 | 0;
 189               		.loc 1 60 0
 190 0014 80EE      		ldi r24,lo8(-32)
 191 0016 8B83      		std Y+3,r24
  61:master.c      **** 	messageWrite[1] = 0x88;
 192               		.loc 1 61 0
 193 0018 88E8      		ldi r24,lo8(-120)
 194 001a 8C83      		std Y+4,r24
 195               	.LVL10:
 196               	.L10:
  62:master.c      **** 
  63:master.c      **** 	//Send (keep trying until successful - slave may not be ready the first time)
  64:master.c      **** 	unsigned char fail = 1;
  65:master.c      **** 	while(fail)
  66:master.c      **** 	{
  67:master.c      **** 		fail = !i2cMTransceive(messageWrite, 2);
 197               		.loc 1 67 0
 198 001c 62E0      		ldi r22,lo8(2)
 199 001e CE01      		movw r24,r28
 200 0020 0396      		adiw r24,3
 201 0022 00D0      		rcall i2cMTransceive
 202               	.LVL11:
  65:master.c      **** 	while(fail)
 203               		.loc 1 65 0
 204 0024 8823      		tst r24
 205 0026 01F0      		breq .L10
 206               	.LVL12:
 207               	.LBB24:
 208               	.LBB25:
 209               		.loc 2 163 0
 210 0028 2FEF      		ldi r18,lo8(799999)
 211 002a 84E3      		ldi r24,hi8(799999)
 212 002c 9CE0      		ldi r25,hlo8(799999)
 213 002e 2150      		1: subi r18,1
 214 0030 8040      		sbci r24,0
 215 0032 9040      		sbci r25,0
 216 0034 01F4      		brne 1b
 217               	.LVL13:
 218 0036 00C0      		rjmp .
 219 0038 0000      		nop
 220               	.LBE25:
 221               	.LBE24:
  68:master.c      **** 	}
  69:master.c      **** 	
  70:master.c      **** 
  71:master.c      **** 	//Wait while slave processes the message
  72:master.c      **** 	_delay_ms(4000);
  73:master.c      **** 
  74:master.c      **** 	//Message to read data back starts with slave address and read bit
  75:master.c      **** 	//Second byte will store said data
  76:master.c      **** 	unsigned char messageRead[2];
  77:master.c      **** 	messageRead[0] = slaveAddress<<1 | 1;
 222               		.loc 1 77 0
 223 003a 81EE      		ldi r24,lo8(-31)
 224 003c 8983      		std Y+1,r24
  78:master.c      **** 
  79:master.c      **** 	//Send and read
  80:master.c      **** 	i2cMTransceive(messageRead, 2);
 225               		.loc 1 80 0
 226 003e 62E0      		ldi r22,lo8(2)
 227 0040 CE01      		movw r24,r28
 228 0042 0196      		adiw r24,1
 229 0044 00D0      		rcall i2cMTransceive
 230               	.LVL14:
  81:master.c      **** 
  82:master.c      **** 	//Byte gotten back is now in messageRead[1].
  83:master.c      **** 	unsigned char response = messageRead[1];
  84:master.c      **** 	displayByte(response);
 231               		.loc 1 84 0
 232 0046 8A81      		ldd r24,Y+2
 233 0048 00D0      		rcall displayByte
 234               	.LVL15:
 235               	.L11:
 236 004a 00C0      		rjmp .L11
 237               		.cfi_endproc
 238               	.LFE8:
 240               		.text
 241               	.Letext0:
 242               		.file 3 "../i2c.h"
 243               		.file 4 "/usr/local/CrossPack-AVR-20131216/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 master.c
/var/folders/r8/lvs4pl7j62n7jpxlwq5fkclm0000gn/T//ccHQshdb.s:2      *ABS*:0000003e __SP_H__
/var/folders/r8/lvs4pl7j62n7jpxlwq5fkclm0000gn/T//ccHQshdb.s:3      *ABS*:0000003d __SP_L__
/var/folders/r8/lvs4pl7j62n7jpxlwq5fkclm0000gn/T//ccHQshdb.s:4      *ABS*:0000003f __SREG__
/var/folders/r8/lvs4pl7j62n7jpxlwq5fkclm0000gn/T//ccHQshdb.s:5      *ABS*:00000000 __tmp_reg__
/var/folders/r8/lvs4pl7j62n7jpxlwq5fkclm0000gn/T//ccHQshdb.s:6      *ABS*:00000001 __zero_reg__
/var/folders/r8/lvs4pl7j62n7jpxlwq5fkclm0000gn/T//ccHQshdb.s:12     .text:00000000 flash
/var/folders/r8/lvs4pl7j62n7jpxlwq5fkclm0000gn/T//ccHQshdb.s:59     .text:00000024 displayByte
/var/folders/r8/lvs4pl7j62n7jpxlwq5fkclm0000gn/T//ccHQshdb.s:158    .text.startup:00000000 main

UNDEFINED SYMBOLS
i2cMInitialize
i2cMTransceive
